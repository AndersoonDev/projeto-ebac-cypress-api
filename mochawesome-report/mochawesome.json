{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-09T22:09:49.196Z",
    "end": "2024-05-09T22:09:49.562Z",
    "duration": 366,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "40a661c9-24f7-4607-b89a-ae5dfe5a52f4",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ad7489c9-e837-4e33-b767-23e22a7d0348",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "c350b4e6-98cb-4be6-8d1a-788091ae5b01",
              "parentUUID": "ad7489c9-e837-4e33-b767-23e22a7d0348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "71c2e68f-b8c1-48f4-9836-f2f8a6ec2135",
              "parentUUID": "ad7489c9-e837-4e33-b767-23e22a7d0348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nome = `Usuario ${Math.random().toString(20).substring(10)}`;\nlet email = `email-${Math.random().toString(20).substring(10)}@qa.com`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": email,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "69312891-bfd0-475d-9c15-3fe91d19a379",
              "parentUUID": "ad7489c9-e837-4e33-b767-23e22a7d0348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nome = `Usuario ${Math.random().toString(20).substring(10)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  failOnStatusCode: false,\n  body: {\n    \"nome\": nome,\n    \"email\": 'fulano@qa.com',\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "b7933a89-ddc9-4ae8-bfbb-332ac4e680a2",
              "parentUUID": "ad7489c9-e837-4e33-b767-23e22a7d0348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nome = `Fulano da Silva ${Math.random().toString(20).substring(10)}`;\nlet email = `email-${Math.random().toString(20).substring(10)}@qa.com`;\ncy.request('usuarios').then(response => {\n  let id = response.body.usuarios[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": nome,\n      \"email\": email,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "f260a6d1-59d1-4451-8fbe-b9fe80eb7dd2",
              "parentUUID": "ad7489c9-e837-4e33-b767-23e22a7d0348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nome = `Usuario ${Math.random().toString(20).substring(10)}`;\nlet email = `email-${Math.random().toString(20).substring(10)}@qa.com`;\ncy.cadastrarUsuarios(nome, email, 'teste', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`,\n    failOnStatusCode: false\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "fa4e6208-2ffa-430d-836b-fa9dee68d5be",
              "parentUUID": "ad7489c9-e837-4e33-b767-23e22a7d0348",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c350b4e6-98cb-4be6-8d1a-788091ae5b01",
            "71c2e68f-b8c1-48f4-9836-f2f8a6ec2135",
            "69312891-bfd0-475d-9c15-3fe91d19a379",
            "b7933a89-ddc9-4ae8-bfbb-332ac4e680a2",
            "f260a6d1-59d1-4451-8fbe-b9fe80eb7dd2",
            "fa4e6208-2ffa-430d-836b-fa9dee68d5be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 219,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}